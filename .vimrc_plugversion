" =============================================================================
" ✨ Raspberry Pi 5 + D2Coding + Vim 개발환경 설정 파일 (.vimrc)
" 📌 주요 언어: Bash, Python, C, C++
" 📌 폰트: D2Coding (Nerd Font 불필요)
" 📦 필수 구성요소: 자동완성(coc.nvim), 포맷터, 상태줄, Git, 테마, 탐색기
" 📌 처음 Vim 설정하는 사람도 쉽게 따라할 수 있도록 구성됨
" =============================================================================

" =============================================================================
" 🚀 설치 순서: 반드시 이 순서대로 따라야 제대로 작동합니다!
" =============================================================================
"
" ▶︎ [1단계] 터미널에서 시스템 필수 패키지 설치
"
"     sudo apt update
"     sudo apt install -y vim nodejs npm clang-format
"
" ▶︎ [2단계] Python 포맷터 설치 (black, isort)
"
"     python3 -m pip install --break-system-packages black isort
"
" ▶︎ [3단계] 플러그인 매니저 vim-plug 설치
"
"     curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" ▶︎ [4단계] 이 .vimrc 저장 후 Vim을 반드시 **완전히 종료**한 뒤 다시 실행하세요!
"           ⚠️ 재시작하지 않으면 PlugInstall 명령이 작동하지 않습니다.
"
" ▶︎ [5단계] Vim 다시 실행 후 명령어 입력:
"
"     :PlugInstall
"
" ▶︎ [6단계] 플러그인 설치 완료 후 언어 자동완성용 서버 설치:
"
"     :CocInstall coc-python coc-clangd
"
" =============================================================================

" =============================================================================
" ░▒▓ 1. 플러그인 목록 (vim-plug 사용)
" =============================================================================
call plug#begin('~/.vim/plugged')

" 🎨 테마 - 눈에 편한 다크톤 컬러 테마
Plug 'sainnhe/everforest'

" 📁 파일 탐색기 (F2로 열고 닫기)
Plug 'preservim/nerdtree'

" 🖼 아이콘 표시 (Nerd Font 사용 시 효과 있음 / D2Coding은 일부 미지원)
Plug 'ryanoasis/vim-devicons'

" 🧠 자동완성 / LSP (Node.js 기반)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 🔧 Git 연동 - 상태, commit, blame, log 등
Plug 'tpope/vim-fugitive'

" 📊 상태줄 플러그인 - 모드, 파일명, 브랜치 등 표시
Plug 'itchyny/lightline.vim'

" 🌈 문법 강조 - 다양한 언어 지원
Plug 'sheerun/vim-polyglot'

" 🧲 괄호 자동완성 + 중첩 색상
Plug 'jiangmiao/auto-pairs'
Plug 'luochen1990/rainbow'

" ✨ 코드 포맷터 (black, clang-format 등 실행)
Plug 'Chiel92/vim-autoformat'

call plug#end()

" =============================================================================
" ░▒▓ 2. 기본 편의 설정
" =============================================================================
set number                      " 줄 번호 표시
set relativenumber             " 상대 줄 번호 표시
set cursorline                 " 현재 줄 강조
syntax enable                  " 문법 강조 활성화
filetype plugin indent on      " 파일 형식 기반 자동 들여쓰기
set background=dark            " 테마용 다크 배경 설정
set termguicolors              " TrueColor 지원
set laststatus=2               " 항상 상태줄 표시

" =============================================================================
" ░▒▓ 3. 테마 설정
" =============================================================================
colorscheme everforest
let g:everforest_background = 'medium'     " 'soft', 'medium', 'hard' 중 선택

" =============================================================================
" ░▒▓ 4. 단축키 설정
" =============================================================================
nnoremap <F2> :NERDTreeToggle<CR>          " F2: 파일 탐색기 토글
nnoremap <F3> :Autoformat<CR>              " F3: 코드 포맷 실행

" =============================================================================
" ░▒▓ 5. 코드 포맷터 설정
" =============================================================================
" ▶︎ Python: black, isort
" ▶︎ C/C++: clang-format
let g:formatdef_black = '"black --quiet -"'
let g:formatters_python = ['black']
let g:formatters_c = ['clang-format']
let g:formatters_cpp = ['clang-format']

" =============================================================================
" ░▒▓ 6. 자동완성 설정 (coc.nvim)
" =============================================================================
" ▶︎ Tab 키로 자동완성 선택
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" =============================================================================
" ░▒▓ 7. 상태줄 설정 (lightline + ASCII 코드까지 표시)
" =============================================================================
let g:lightline = {
  \ 'colorscheme': 'everforest',
  \ 'active': {
  \   'left': [ [ 'mode' ], [ 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'fileformat', 'fileencoding', 'filetype' ],
  \              [ 'gitbranch' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'FugitiveHead',
  \   'lineinfo': 'LightLineLineInfo'
  \ }
\ }

" ▶︎ 상태줄에 커서 위치 + 해당 문자의 ASCII 코드 출력
function! LightLineLineInfo()
  let l:line = line('.')
  let l:col = col('.')
  let l:char = getline('.')[l:col - 1]
  if l:char == ''
    return l:line . ':' . l:col
  endif
  let l:code = char2nr(l:char)
  return l:line . ':' . l:col . '  0x' . printf('%02X', l:code) . ' (' . l:code . ')'
endfunction
